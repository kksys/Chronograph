name: Chronograph - publish release

on:
  release:
    types:
      - "published"

jobs:
  build:
    name: Build and analyse default scheme using xcodebuild command
    if: ${{ github.event.release.body == '' }}
    runs-on: macos-12

    env:
      XCODE_PATH: "/Applications/Xcode_13.4.1.app"
      TARGET_VERSION: "${{ github.event.release.name }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set Xcode toolset version
        run: |
          sudo xcode-select -s "$XCODE_PATH"
          sudo xcode-select -p
      - name: Update version
        run: |
          ./scripts/update_version.sh "$TARGET_VERSION"
      - name: Build
        run: |
          ./scripts/make_xcframework.sh
          mv "./build/Chronograph.zip" "./build/Chronograph-$TARGET_VERSION.zip"
          mv "./build/Chronograph.archive.zip" "./build/Chronograph-$TARGET_VERSION.archive.zip"
      - name: Upload artifact to release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "$TARGET_VERSION" \
            "./build/Chronograph-$TARGET_VERSION.zip#Chronograph-$TARGET_VERSION.zip" \
            "./build/Chronograph-$TARGET_VERSION.archive.zip#Chronograph-$TARGET_VERSION.archive.zip" \
            --clobber
      - name: Push the podspec of new version to private repo
        run: |
          pod repo add kksys https://kksys:${{ secrets.ACCESS_TOKEN }}@github.com/kksys/CocoaPodsSpecs.git
          pod repo push kksys Chronograph.podspec --allow-warnings
      - name: Update import version
        run: |
          sed -i '' -E "s/(pod 'Chronograph', +')[^']*(')/\1${TARGET_VERSION}\2/g" ./Podfile
        working-directory: ./Example
      - name: Prepare Example project to use new framework
        run: |
          pod update
          xcodebuild \
            build \
            -workspace "Example.xcworkspace" \
            -scheme iOS \
            -sdk iphonesimulator \
            -destination "generic/platform=iOS Simulator" \
            -configuration "Release"
        working-directory: ./Example
      - name: Check the xcproject is correct
        run: |
          grep '\[CP\] Embed Pods Frameworks' ./Example.xcodeproj/project.pbxproj
        working-directory: ./Example
      - name: Commit and merge the changes of new version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: feature/release_${{ env.TARGET_VERSION }}
        run: |
          COMMIT_MSG=":arrow_up: Updated version $TARGET_VERSION"
          git checkout -b ${{ env.BRANCH_NAME }}
          git add -A
          git commit -m "${COMMIT_MSG}"
          git push --set-upstream origin ${{ env.BRANCH_NAME }}
          gh pr create --base master --body "${COMMIT_MSG}" --title "${COMMIT_MSG}"
          gh pr merge ${{ env.BRANCH_NAME }} --admin --squash
          git checkout master
          git pull
          git branch -d ${{ env.BRANCH_NAME }}
      - name: Recreate new release to official
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release delete "$TARGET_VERSION" -y
          git tag -d "$TARGET_VERSION"
          git push --delete origin "$TARGET_VERSION"
          gh release create "$TARGET_VERSION" \
            --generate-notes \
            --target master \
            --title "$TARGET_VERSION" \
            "./build/Chronograph-$TARGET_VERSION.zip#Chronograph-$TARGET_VERSION.zip" \
            "./build/Chronograph-$TARGET_VERSION.archive.zip#Chronograph-$TARGET_VERSION.archive.zip"
